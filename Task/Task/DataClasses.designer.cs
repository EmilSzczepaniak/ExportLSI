#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Task
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Taskdb")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertExport(Export instance);
    partial void UpdateExport(Export instance);
    partial void DeleteExport(Export instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::Task.Properties.Settings.Default.TaskdbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Export> Exports
		{
			get
			{
				return this.GetTable<Export>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Export")]
	public partial class Export : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nazwa;
		
		private System.Nullable<System.DateTime> _Data;
		
		private System.Nullable<System.TimeSpan> _Godzina;
		
		private string _Uzytkownik;
		
		private string _Lokal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNazwaChanging(string value);
    partial void OnNazwaChanged();
    partial void OnDataChanging(System.Nullable<System.DateTime> value);
    partial void OnDataChanged();
    partial void OnGodzinaChanging(System.Nullable<System.TimeSpan> value);
    partial void OnGodzinaChanged();
    partial void OnUzytkownikChanging(string value);
    partial void OnUzytkownikChanged();
    partial void OnLokalChanging(string value);
    partial void OnLokalChanged();
    #endregion
		
		public Export()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nazwa", DbType="VarChar(50)")]
		public string Nazwa
		{
			get
			{
				return this._Nazwa;
			}
			set
			{
				if ((this._Nazwa != value))
				{
					this.OnNazwaChanging(value);
					this.SendPropertyChanging();
					this._Nazwa = value;
					this.SendPropertyChanged("Nazwa");
					this.OnNazwaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="Date")]
		public System.Nullable<System.DateTime> Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Godzina", DbType="Time")]
		public System.Nullable<System.TimeSpan> Godzina
		{
			get
			{
				return this._Godzina;
			}
			set
			{
				if ((this._Godzina != value))
				{
					this.OnGodzinaChanging(value);
					this.SendPropertyChanging();
					this._Godzina = value;
					this.SendPropertyChanged("Godzina");
					this.OnGodzinaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uzytkownik", DbType="VarChar(50)")]
		public string Uzytkownik
		{
			get
			{
				return this._Uzytkownik;
			}
			set
			{
				if ((this._Uzytkownik != value))
				{
					this.OnUzytkownikChanging(value);
					this.SendPropertyChanging();
					this._Uzytkownik = value;
					this.SendPropertyChanged("Uzytkownik");
					this.OnUzytkownikChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lokal", DbType="VarChar(50)")]
		public string Lokal
		{
			get
			{
				return this._Lokal;
			}
			set
			{
				if ((this._Lokal != value))
				{
					this.OnLokalChanging(value);
					this.SendPropertyChanging();
					this._Lokal = value;
					this.SendPropertyChanged("Lokal");
					this.OnLokalChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

        internal object ToList()
        {
            throw new NotImplementedException();
        }
    }
}
#pragma warning restore 1591
